@page "/employees"
@inject EmployeesService employeeService
<h1>My Employee List</h1>
<p>This component demonstrates managing a Employee list.</p>
@if (employees == null)
{
    <p><em>Loading...</em></p>
}
else
{   
    <button @onclick="@Add" class="btn btn-success">Add</button>
    <table class="table">
        <thead>
            <tr>

                <th>Id</th>
                <th>FullName</th>
                <th>Department</th>
                <th>Salary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in employees)
            {
                <tr @onclick="@(() => Show(item.Id))">
                    <td>@item.Id</td>
                    <td>@item.FullName</td>
                    <td>@item.Department</td>
                    <td>@item.Salary</td>
                </tr>
            }
        </tbody>
    </table>
}
@if (employees != null && mode == MODE.Add)
{
    <input placeholder="FirstName" @bind="@fullname" />
    <br />
    <input placeholder="Department" @bind="@department" />
    <br />
    <input placeholder="Salary" @bind="@salary" />
    <br />
    <button @onclick="@Insert" class="btn btn-warning">Insert</button>
}
@if (employees != null && mode == MODE.EditDelete) // Update & Delete form
{
    <input type="hidden" @bind="@id" />
    <br />
    <input placeholder="Full Name" @bind="@fullname" />
    <br />
    <input placeholder="Department" @bind="@department" />
    <br />
    <input placeholder="Salary" @bind="@salary" />
    <br />
    <button @onclick="@Update" class="btn btn-primary">Update</button>
    <span>&nbsp;&nbsp;&nbsp;&nbsp;</span>
    <button @onclick="@Delete" class="btn btn-danger">Delete</button>
}


@code 

{
    string id;
    string fullname;
    string department;
    string salary;
    private string employeeId;

    Employee employee;

    private enum MODE { None, Add, EditDelete};
    MODE mode = MODE.None;

    List<Employee> employees;
    protected override async Task OnInitializedAsync()
    {
        await Load();
    }
    protected async Task Load()
    {
        employees = await employeeService.GetEmployeesAsync();
    }
    protected void Add()
    {
        ClearFields();
        mode = MODE.Add;
    }
    protected void ClearFields()
    {
        id = string.Empty;
        fullname = string.Empty;
        department = string.Empty;
        salary = string.Empty;
    }
    protected async Task Insert()
    {
        Employee s = new Employee()
            {
                Id = Guid.NewGuid().ToString(),
                FullName = fullname,
                Department = department,
                Salary = decimal.Parse(salary)
            };
        await employeeService.InsertEmployeeAsync(s);
        ClearFields();
        await Load();
        mode = MODE.None;
    }
    protected async Task Show(string id)
    {
        employee = await employeeService.GetEmployeeByIdAsync(id);
        id = employee.Id;
        fullname = employee.FullName;
        department = employee.Department;
        salary = employee.Salary.ToString(); // Convert decimal to string
        mode = MODE.EditDelete;
    }
    protected async Task Update()
    {
        if (decimal.TryParse(salary, out decimal parsedSalary))
        {
            Employee s = new Employee()
                {
                    Id = employeeId,
                    FullName = fullname,
                    Department = department,
                    Salary = parsedSalary // Convert string to decimal
                };

            await employeeService.UpdateEmployeeAsync(employeeId, s);
            ClearFields();
            await Load();
            mode = MODE.None;
        }
        else
        {
            // Handle invalid salary input
            Console.WriteLine("Invalid salary format.");
        }
    }

    protected async Task Delete()
    {
        await employeeService.DeleteEmployeeAsync(employeeId);
        ClearFields();
        await Load();
        mode = MODE.None;
    }



} 